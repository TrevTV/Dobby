name: Build

on: push

jobs:
  win-build:
    runs-on: windows-latest
    name: Windows Build

    steps:
      - uses: actions/checkout@v3

      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1.1

      - name: Configure CMake
        shell: cmd
        run: |
          cmake -DCMAKE_SYSTEM_PROCESSOR=amd64 -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_BUILD_TYPE=Release -DDynamicBinaryInstrument=OFF -DPlugin.SymbolResolver=OFF -A x64 -B build64
          cmake -DCMAKE_SYSTEM_PROCESSOR=x86 -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_BUILD_TYPE=Release -DDynamicBinaryInstrument=OFF -DPlugin.SymbolResolver=OFF -A Win32 -B build32

      - name: Build x86
        run: |
          msbuild -m -p:Configuration=Release -t:dobby build32/Dobby.sln

      - name: Build x64
        run: |
          msbuild -m -p:Configuration=Release -t:dobby build64/Dobby.sln

      - name: Collect artifacts
        shell: cmd
        run: |
          mkdir build_result
          copy "build32\Release\dobby.lib" "build_result\dobby_x86.lib"
          copy "build64\Release\dobby.lib" "build_result\dobby_x64.lib"

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Windows
          path: build_result

  linux-build:
    runs-on: ubuntu-latest
    name: Linux Build

    steps:
      - uses: actions/checkout@v3

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get -y install gcc-multilib g++-multilib libc6-dev-i386

      - name: Configure CMake
        run: |
          cmake -DCMAKE_SYSTEM_PROCESSOR=amd64 -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_BUILD_TYPE=Release -DDynamicBinaryInstrument=OFF -DPlugin.SymbolResolver=OFF -B build64
          cmake -DCMAKE_SYSTEM_PROCESSOR=x86 -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_CXX_FLAGS="-m32" -DCMAKE_C_FLAGS="-m32" -DCMAKE_SHARED_LINKER_FLAGS="-m32" -DCMAKE_BUILD_TYPE=Release -DDynamicBinaryInstrument=OFF -DPlugin.SymbolResolver=OFF -B build86

      - name: Build x64
        run: |
          cd build64 && make dobby

      - name: Build x86
        run: |
          cd build86 && make dobby

      - name: Collect artifacts
        run: |
          mkdir build_result
          cp build86/libdobby.a build_result/libdobby_x86.a
          cp build64/libdobby.a build_result/libdobby_x64.a

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Linux
          path: build_result

  macos-build:
    runs-on: macos-latest
    name: macOS Build

    steps:
      - uses: actions/checkout@v3

      - name: Configure CMake
        run: |
          cmake -DCMAKE_SYSTEM_PROCESSOR=x86_64 -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_SYSTEM_NAME=Darwin -DCMAKE_BUILD_TYPE=Release -DDynamicBinaryInstrument=OFF -DPlugin.SymbolResolver=OFF -B build64

      - name: Build x64
        run: |
          cd build64 && make dobby

      - name: Collect artifacts
        run: |
          mkdir build_result
          cp build64/libdobby.a build_result/libdobby_x64.a

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macOS
          path: build_result

  android-arm64-v8a-build:
    runs-on: ubuntu-latest
    name: Android ARM64-v8a Build

    steps:
      # Step 1: Checkout the code
      - uses: actions/checkout@v3

      # Step 2: Set up Android ND
      - name: Set up Android NDK
        run: |
          wget https://dl.google.com/android/repository/android-ndk-r21e-linux-x86_64.zip
          unzip android-ndk-r21e-linux-x86_64.zip -d $HOME/ndk
          echo "export ANDROID_NDK=$HOME/ndk/android-ndk-r21e" >> $GITHUB_ENV

      # Step 3: Set up Android SDK (Optional if not needed for other tasks)
      - name: Set up Android SDK
        run: |
          wget https://dl.google.com/android/repository/commandlinetools-linux-7583922_latest.zip
          unzip commandlinetools-linux-7583922_latest.zip -d $HOME/android-sdk
          echo "export ANDROID_SDK=$HOME/android-sdk" >> $GITHUB_ENV

      # Step 4: Install dependencies (if any are required for your build tools)
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3 python3-pip
          pip3 install --upgrade setuptools

      # Step 5: Configure the build with CMake for Android ARM64-v8a
      - name: Configure CMake for Android ARM64-v8a
        run: |
          cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK/build/cmake/android.toolchain.cmake \
                -DANDROID_ABI=arm64-v8a \
                -DANDROID_NATIVE_API_LEVEL=21 \
                -DCMAKE_SYSTEM_NAME=Android \
                -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
                -DCMAKE_BUILD_TYPE=Release \
                -DDynamicBinaryInstrument=OFF \
                -DPlugin.SymbolResolver=OFF \
                -DCMAKE_CXX_COMPILER=clang++ \
                -DCMAKE_C_COMPILER=clang \
                -B build_android_arm64_v8a

      # Step 6: Build the project for ARM64-v8a architecture
      - name: Build Android ARM64-v8a
        run: |
          cd build_android_arm64_v8a && make dobby

      # Step 7: Collect build artifacts (e.g., libdobby.a)
      - name: Collect build artifacts
        run: |
          mkdir build_result
          cp build_android_arm64_v8a/libdobby.a build_result/libdobby_arm64_v8a.a

      # Step 8: Upload the build artifacts to GitHub Actions
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Android_ARM64-v8a
          path: build_result
